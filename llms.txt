Project Structure:
üìÅ googlefonts-images
‚îú‚îÄ‚îÄ üìÅ img
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ 17
‚îú‚îÄ‚îÄ üìÑ .gitignore
‚îú‚îÄ‚îÄ üìÑ _config.yml
‚îú‚îÄ‚îÄ üìÑ build_images.py
‚îú‚îÄ‚îÄ üìÑ LICENSE
‚îú‚îÄ‚îÄ üìÑ README.md
‚îî‚îÄ‚îÄ üìÑ requirements.txt


<documents>
<document index="1">
<source>.gitignore</source>
<document_content>
.idea/
.dccache
*.code-workspace

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

</document_content>
</document>

<document index="2">
<source>LICENSE</source>
<document_content>
MIT License

Copyright (c) 2021 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

</document_content>
</document>

<document index="3">
<source>README.md</source>
<document_content>
# googlefonts-images

CLI tool to render images of each primary font of a font family from [Google Fonts](https://github.com/google/fonts).

1. The tool uses the `hb-view` CLI tool to render samples at the desired PPM.
2. The tool creates sample text randomly for non-Latin fonts (using the dominant script of the font, determined by the largest codepoint coverage), and for fonts that support the Latin script, it uses a predefined sample text plus one randomly-generated word. For non-Latin fonts, the samples may be nonsensical and produce odd character combinations for connecting scripts.
3. The PNG images are accessible via URL like `https://twardoch.github.io/googlefonts-images/img/17/roboto.png`
4. Each image base name corresponds to the folder name of the family in the Google Fonts repo, like `https://github.com/google/fonts/tree/main/apache/roboto` in the above example.
5. Only the "main" font from each family folder is rendered. The "main" font gets determined by its shortest path name.


## Installation

Needs macOS, perhaps also works on Linux.

1. Install [Homebrew](https://brew.sh/) on macOS.
2. Run `brew install harfbuzz` or install `harfbuzz` on Linux.
3. Run `brew install python` or install Python 3.9 or newer on Linux.
4. Run `python3 -m pip install -r requirements.txt`

## Usage

```
usage: ./build_images.py [-h] -f folder [-i folder] [-p int]

Takes a folder of Google Fonts and builds images

optional arguments:
  -h, --help            show this help message and exit
  -f folder, --fonts folder
                        Folder with the local copy of https://github.com/google/fonts
  -i folder, --images folder
                        Folder in which the images will be written.
  -p int, --ppm int     PPM size at which the images will be rendered.
```


</document_content>
</document>

<document index="4">
<source>_config.yml</source>
<document_content>
theme: jekyll-theme-minimal
</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/googlefonts-images/build_images.py
# Language: python

import argparse
import random
from collections import OrderedDict
from pathlib import Path
import fontTools.ttLib
import fontTools.unicodedata as ucd
from sh import hb_view as hbv

class GoogleFontsImageGenerator:
    def __init__((self, fonts_folder, images_folder=None, ppm=17)):
    def get_script_unicodes((self, font)):
    def get_script_sample_text_adv((self, font_path, words=5, chars=6)):
    def find_best_font((self, folder)):
    def get_script_sample_text((self, font_path, base)):
    def find_fonts((self)):
    def render_font((self, font_path, png_path, text, ppm=None, script="Latn")):
    def render_fonts((self)):

def __init__((self, fonts_folder, images_folder=None, ppm=17)):

def get_script_unicodes((self, font)):

def get_script_sample_text_adv((self, font_path, words=5, chars=6)):

def find_best_font((self, folder)):

def get_script_sample_text((self, font_path, base)):

def find_fonts((self)):

def render_font((self, font_path, png_path, text, ppm=None, script="Latn")):

def render_fonts((self)):

def cli(()):


<document index="5">
<source>requirements.txt</source>
<document_content>
sh>=1.14.1
fontTools>=4.25.0

</document_content>
</document>

</documents>